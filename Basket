import numpy as np
import pandas as pd
import requests
import json
from matplotlib import pyplot as plt

%run APIkeys.py
key = os.environ['BLS_API_key']

1 Formalities
Claire, Angel, and Gavi's CPI 

2 Definition of the Index
2.1 Items and Weights
    textbooks.25 + food.25 + transportation.04 + hygiene.1 + rent.15 + apparel.03 + entertainment.08 +medicalservices.1
Justification: textbooks(SSEA011) are expensive and we need new ones every semester
               food(SAF) is needed to live - need most often
               transportation(SAT) - needed sometimes, mostly provided by tuition 
               hygiene * commodities minus food * (SA0L1E) - also needed, not necessary to boy as often as food
               rent(SASR2S) - needed to live, very expensive with utlitiies and whatnot
               clothes no shoes(SA311) are enecessary - but we don't have time or funds to go shopping very often
               Streaming (SERA02)
               medical services(SAM) - a necessity, tends to be expensive, people get sick in college a lot

def multiSeriesV4(varList,myKey):
    # Input: varList = a list of strings containing the series names
    # Input: myKey =  a string containing your BLS API key
    # Output: new_df = a data frame containing the data collected
    
    base_url = 'https://api.bls.gov/publicAPI/v2/timeseries/data/'  #this will not change
    headers = {'Content-type': 'application/json'}  #This will not changed !

    parameters = {
        "seriesid":varList,
        "startyear":"2017", 
        "endyear":"2022",
        "catalog":True, 
        "calculations":False, 
        "annualaverage":False,
        "aspects":False,
        "registrationkey": myKey 
     }

    data = json.dumps(parameters) #this converts the Python dictionary into a JSON format
    
    p = requests.post(base_url, data=data, headers=headers)
    json_data = json.loads(p.text)
    
    n = len(varList) #number of series requested
    
    new_df = pd.DataFrame(columns=['year', 'period'])
    for item in range(n):
        l = len(json_data['Results']['series'][item]['data']) #length of the list
        if l == 0:
            print('series ',varList[item],' does not exist')
        else:
            
            print('series ',varList[item],' exists with ',l,' observations')
            d = json_data['Results']['series'][item]['data']
            current_df = pd.DataFrame(data=d)
            current_df = current_df[['year','period','value']].astype({'value': 'float64'})
            current_df = current_df.rename(columns = {'value':varList[item]})
            new_df = new_df.merge(current_df, on = ['year','period'],how='outer')
    
    return new_df

2.2 Locations and Weights
Locations: NYC:S12A:
Pittsburgh: A104:
Philadelphia: S12B:

.5(PGH) + .3(NYC) + .2(PHI) 

areaWeights = [0.5, 0.3, 0.2]
itemWeights = [0.25, 0.25, 0.04, 0.1, 0.03, 0.15,0.03, .08, .1]

weights =[]

for a in range(len(area)):
    for i in range(len(item)):
        weights. append(areaWeights[a]*itemWeights[i])
sum(weights)

for i in range(len(weights)):
    df.myCPI += weights[i]*df[basketCPI[i+1]]

df.myCPI

2.3 Finalizing the basket

prefix = 'CUUR'
area = ['S12A','A104','S12B']
item = ['SSEA011','SAF','SAT','SA0L1E','SASR2S','SA311','SERA02', 'SAM']

basketCPI = ['CUUR0000SA0']
for i in item:
    for a in area:
        basketCPI.append(prefix+a+i)
basketCPI

3 Downloading the basket
3.1 Refine the basket


3.2 Downloading 


4 Aggregating 
nrows, ncols = df.shape
df["myCPI"] = np.zeros(nrows)
df


5 Inflation
cpi = df["CPI_U"]
mycpi = df["myCPI"]

def myinflation(lag):
    # This function computes the percent change in the level of myCPI (inflation) for the 
    # 12 months starting '12+lag' months ago and ending 'lag' months ago.
    # lag is an integer input
    
    new = mycpi[lag]
    old = mycpi[12+lag]
    
    change = (new/old - 1)*100
    
    return change

def generalinflation(lag):
    
    new = cpi[lag]
    old = cpi[12+lag]
    
    change = (new/old - 1)*100
    
    return change

